package com.experion.services;

import java.util.ArrayList;
import java.util.Scanner;

import com.experion.entity.Customer;
import com.experion.entity.Electronics;
import com.experion.entity.Fabric;

import com.experion.entity.Product;

public  class Services {
	
	public static void addProductDetails(ArrayList<Product> productList, String string) {
			
	    	
		/*Scanner scanner = new Scanner(System.in);
		System.out.println("Enter Product Code");
		String productCode = scanner.nextLine();
		System.out.println("Enter Product Name");
		String productName = scanner.nextLine();
		System.out.println("Enter Product Type");
		String productType = scanner.nextLine();
		
		System.out.println("Enter FabricSize");
		String fabricSize =  scanner.nextLine();
		
		System.out.println("Enter the warranty details:/if not applicable give null");
		String warranty =  scanner.nextLine();*/
	    
		
		Product product =null;
		if (string.compareTo("Fabric") == 0) {
			Scanner scanner = new Scanner(System.in);
			System.out.println("Enter Product Code");
			String productCode = scanner.nextLine();
			System.out.println("Enter Product Name");
			String productName = scanner.nextLine();
			System.out.println("Enter Product Type");
			String productType = scanner.nextLine();
			
			System.out.println("Enter FabricSize");
			String fabricSize =  scanner.nextLine();
			
			product = new Fabric(productCode, productName, productType,fabricSize);
			
			}
		else if(string.compareTo("Electronics") == 0)	{
			Scanner scanner = new Scanner(System.in);
			System.out.println("Enter Product Code");
			String productCode = scanner.nextLine();
			System.out.println("Enter Product Name");
			String productName = scanner.nextLine();
			System.out.println("Enter Product Type");
			String productType = scanner.nextLine();
			System.out.println("Enter the warranty details:");
			String warranty =  scanner.nextLine();
			System.out.println("Enter the Service Charge:");
			String serviceCharge =  scanner.nextLine();
			
			
			product = new Electronics(productCode, productName, productType, warranty,serviceCharge );
			
			
		}
		productList.add(product);
		// System.out.println(product.getProductCode());
		
	}
		
		public static void displayProductDetails(ArrayList<Product> productList) {
			
			String productType;
			
			
			System.out.println("ProductCode"+"	"+"ProductName" + " 	" + "ProductType"+" 	"+"FabricSize/Warranty");
			
			     for(Product product: productList)
			        {
			    	 //System.out.println(product.getProductCode());
			          if(product!=null){
			        	  if(product instanceof Fabric )
			        	  {
			        	Fabric  fabric = (Fabric)product;
			        	
			          System.out.println(fabric.getProductCode()+"		 "+ fabric.getProductName()+"	 	"+fabric.getProductType()+"		"+fabric.getFabricSize() );
			        		  
			         }
			
			        	  if(product instanceof Electronics )
			        	  {
			        		  Electronics  electronics = (Electronics)product;
				System.out.println(electronics.getProductCode()+"	 	"+ electronics.getProductName()+"	 	"+electronics.getProductType() +" 		"+ electronics.getWarranty());	
		
		    
		
		
	}

}
			}
		}

		public static Product buyProduct(ArrayList<Product> productList, Customer customer) {
			// TODO Auto-generated method stub
			Scanner scanner = new Scanner(System.in);
			
			Product selectedProduct = customer.getProduct();
			System.out.println("Product Code" + "      " + "Product Name" + "      " + "Product Type");
			for(Product product: productList) 
			{
				System.out.println(product.getProductCode() + "      " + product.getProductName() + "      "
						+ product.getProductType());
			}
			
		
				System.out.println("Enter the product code to buy : ");	
				String productCode = scanner.nextLine();
			
			       for (Product product : productList) 
			           {
					
					if (selectedProduct.getProductCode().compareTo(productCode) == 0) {
						System.out.println("Esucessfully bought ");

				}
			
					
				}
			return selectedProduct;
				
			}
		
		
		public static void getProductService(Customer customer) {
			Fabric fabric;
			Electronics electronics;
			Product product = customer.getProduct();
			System.out.println("The product you bought is " + product.getProductName());
			if (product instanceof Fabric)
			{
				 fabric = (Fabric) product;
				 fabric.productExchange();
			} else if (product instanceof Electronics) {   
				electronics = (Electronics) product;
				System.out.println("Your service charge is " + electronics.getServiceCharge());
			}

		}
			
		public static Customer giveCustomerDetails(ArrayList<Product> productList) {
			
			Customer customer = new Customer();
			Product selectedProduct = null;
			Scanner scanner = new Scanner(System.in);
			System.out.println("Enter the customer code");
			String customerCode = scanner.nextLine();
			customer.setCustomerCode(customerCode);
			System.out.println("Enter the customer name");
			String customerName = scanner.nextLine();
			customer.setCustomerName(customerName);
			System.out.println("Enter the customer selected product code");
			String productCode = scanner.nextLine();
			   for (Product product : productList) 
	           {
			
			   if (product.getProductCode().compareTo(productCode) == 0) {
				selectedProduct = product;
			    customer.setProduct(selectedProduct);
		       }
			   else 
				System.out.println("Enter a valid Product Code");
			
			
		}
			   return customer;
				
					}
}

